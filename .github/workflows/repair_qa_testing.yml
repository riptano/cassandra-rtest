name: Cassandra Repair Quality Testing
on:
  push:
    branches:
      - master
#  pull_request:

jobs:
  integration-tests:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - uses: webfactory/ssh-agent@v0.4.1
      with:
          ssh-private-key: ${{ secrets.TLP_CLUSTER_KEY }}

    - name: Cache local Maven repository
      uses: actions/cache@v2
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Install dependencies
      shell: bash
      run: |
          sudo apt-get update
          sudo apt-get install openjdk-8-jre openjdk-8-jdk -y
          sudo dpkg -i "./dependencies/tlp-cluster_0.7~SNAPSHOT_all.deb"
          mkdir -p /home/runner/.tlp-cluster/profiles/default

          sudo apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common -y
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sudo add-apt-repository    "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
            $(lsb_release -cs) \
            stable"
          sudo apt-get update
          sudo apt-get install docker-ce docker-ce-cli containerd.io -y
          sudo usermod -aG docker ${USER}
          sudo apt-get install ant -y
          # No clue why we need to pull these manually now...
          docker pull hashicorp/terraform:0.11.14
          docker pull thelastpickle/pssh:1.0
          docker pull thelastpickle/cassandra-build:1.0

    - name: Configure tlp-cluster
      if: ${{ success() }}
      env:
        TLP_CLUSTER_KEY: ${{ secrets.TLP_CLUSTER_KEY }}
        TLP_CLUSTER_SETTINGS: ${{ secrets.TLP_CLUSTER_SETTINGS }}
      run: |
          set -e
          if [[ -n "${TLP_CLUSTER_KEY}" ]];
          then
            printf "%s" "${TLP_CLUSTER_SETTINGS}" > ~/.tlp-cluster/profiles/default/settings.yaml
            printf "%s" "${TLP_CLUSTER_KEY}" > ~/.tlp-cluster/profiles/default/secret.pem
          fi
          chmod 600 /home/runner/.tlp-cluster/profiles/default/secret.pem

    - name: Build Cassandra Trunk
      if: ${{ success() }}
      shell: bash
      run: |
        echo "Building trunk..."
        git clone https://github.com/apache/cassandra.git
        cd cassandra
        ant
        cd ..
        tlp-cluster build -n latest_trunk ./cassandra
        ls -lrt ~/.tlp-cluster/builds/latest_trunk
        ls -lrt ~/.tlp-cluster/builds/latest_trunk/conf
        ls -lrt ~/.tlp-cluster/builds/latest_trunk/deb
        
    - name: Spin up cluster
      if: ${{ success() }}
      shell: bash
      run: |
        echo "Initializing AWS cluster..."
        timeout --foreground 120 tlp-cluster init CASS CASSANDRA-15580 "4.0 repair quality testing" -c 3 --instance m5ad.xlarge > init.log 2>&1
        echo "Spinning up EC2 instances..."
        timeout --foreground 120 tlp-cluster up --auto-approve > up.log 2>&1
        echo "Using built trunk..."
        timeout --foreground 180 tlp-cluster use latest_trunk --config "cluster_name:repair_quality,num_tokens:256" > use.log 2>&1 || cat use.log
        # Allow external JMX access
        sed -i '1s/^/LOCAL_JMX=no\n/' provisioning/cassandra/conf/cassandra-env.sh
        sed -i 's/com.sun.management.jmxremote.authenticate=true/com.sun.management.jmxremote.authenticate=false/' provisioning/cassandra/conf/cassandra-env.sh
        echo "Installing packages..."
        timeout --foreground 600 tlp-cluster install > install.log 2>&1 || echo "meh... install phase seem to have failed"
        shopt -s expand_aliases || setopt aliases
        source env.sh
        echo "Starting Cassandra..."
        timeout --foreground 600 tlp-cluster start > start.log 2>&1 || echo "meh... start phase seem to have failed"

    - name: Install and configure Medusa
      if: ${{ success() }}
      shell: bash
      env:
        AWS_CREDENTIALS: ${{ secrets.ALEX_GITHUB_ACTIONS_AWS_CREDENTIALS }}
      run: |
        shopt -s expand_aliases || setopt aliases
        source env.sh
        mkdir -p /home/runner/.aws
        echo "${AWS_CREDENTIALS}" >> ~/.aws/credentials
        chmod 600 ~/.aws/credentials
        install_medusa.sh -b cassandra-repair-qa -c ~/.aws/credentials -s s3_us_west_oregon --prefix=cassandra-qa --branch=master > install_medusa.log

    - name: Check if test scenarios can run
      if: ${{ success() }}
      run: |
        set -e
        set -x
        shopt -s expand_aliases || setopt aliases
        source env.sh
        # Push the rtest on the monitoring node to run them from there
        tar czf cassandra-rtest.tar.gz *
        scp cassandra-rtest.tar.gz monitoring0:/home/ubuntu
        ssh monitoring0 "mkdir -p /home/ubuntu/.tlp-cluster/profiles/default/"
        scp ~/.tlp-cluster/profiles/default/secret.pem monitoring0:/home/ubuntu/.tlp-cluster/profiles/default/secret.pem
        cat << EOF >> run_test_suite.sh
        set -x
        sudo apt-get install jq -y
        curl -sL https://github.com/shyiko/jabba/raw/master/install.sh | bash && . ~/.jabba/jabba.sh
        . ~/.jabba/jabba.sh && jabba install adopt@1.8.0-272
        . ~/.jabba/jabba.sh && jabba alias default adopt@1.8.0-272
        . ~/.jabba/jabba.sh && sudo update-alternatives --install /usr/bin/java java ${JAVA_HOME%*/}/bin/java 20000
        . ~/.jabba/jabba.sh && sudo update-alternatives --install /usr/bin/javac javac ${JAVA_HOME%*/}/bin/javac 20000
        sudo apt-get install maven -y
        i=0
        for ip in \$(cat provisioning/monitoring/config/prometheus/tg_mcac.json | jq -r '.[]?.targets[0]'|cut -d':' -f1); do export CLUSTER_CONTACT_POINT\$i=\$ip; ((i=i+1)); done
        tar xvf /home/ubuntu/cassandra-rtest.tar.gz
        set -e
        CLUSTER_KIND=aws mvn test -Dcucumber.filter.tags="@\$1"
        EOF

        scp run_test_suite.sh monitoring0:/home/ubuntu
        ssh monitoring0 "chmod u+x /home/ubuntu/run_test_suite.sh"
        ssh monitoring0 "./run_test_suite.sh DryRun"
        source env.sh

    - name: Run full repair test scenarios
      if: ${{ success() }}
      run: |
          shopt -s expand_aliases || setopt aliases
          source env.sh
          ssh monitoring0 "./run_test_suite.sh Full"

    - name: Run incremental repair test scenarios
      if: ${{ success() }}
      run: |
        shopt -s expand_aliases || setopt aliases
        source env.sh
        ssh monitoring0 "./run_test_suite.sh Incremental"

    - name: Run subrange repair test scenarios
      if: ${{ success() }}
      run: |
        shopt -s expand_aliases || setopt aliases
        source env.sh
        ssh monitoring0 "./run_test_suite.sh Subrange"

    - name: Tear down
      if: ${{ always() }}
      run: |
          echo "Terminating instances, please be patient..."
          timeout --foreground 600 tlp-cluster down --auto-approve > down.log 2>&1
          tail -10 down.log

